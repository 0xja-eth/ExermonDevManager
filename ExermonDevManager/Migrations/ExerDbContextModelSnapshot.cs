// <auto-generated />
using System;
using ExermonDevManager.Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExermonDevManager.Migrations
{
    [DbContext(typeof(ExerDbContext))]
    partial class ExerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExermonDevManager.Core.Entities.CustomEnum", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<int>("enumGroupId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("enumGroupId");

                    b.ToTable("Core_customenums");
                });

            modelBuilder.Entity("ExermonDevManager.Core.Entities.CustomEnumGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Core_customenumgroups");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.EmitInterface", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ExerUnity_emitinterfaces");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Exception_", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("alertText")
                        .HasColumnType("text");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<int>("moduleId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("ExerUnity_exceptions");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("derivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("modelId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("modelId");

                    b.ToTable("ExerUnity_groupdatas");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupDataInheritDerive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<int>("deriveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("inheritTypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("deriveTypeId");

                    b.HasIndex("inheritTypeId");

                    b.ToTable("ExerUnity_groupdatainheritderives");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.InterfaceParam", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("dimension")
                        .HasColumnType("int");

                    b.Property<int?>("emitInterfaceId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int?>("ownerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("reqInterfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("resInterfaceId")
                        .HasColumnType("int");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("emitInterfaceId");

                    b.HasIndex("ownerTypeId");

                    b.HasIndex("reqInterfaceId");

                    b.HasIndex("resInterfaceId");

                    b.HasIndex("typeId");

                    b.ToTable("ExerUnity_interfaceparams");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("abstract_")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("derivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("moduleId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("ExerUnity_models");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ModelField", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("autoConvert")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoLoad")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("defaultNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("dimension")
                        .HasColumnType("int");

                    b.Property<string>("fDefault")
                        .HasColumnType("text");

                    b.Property<string>("format")
                        .HasColumnType("text");

                    b.Property<string>("keyName")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int?>("ownerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("protectedSet")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.Property<bool>("useList")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("ownerTypeId");

                    b.HasIndex("typeId");

                    b.ToTable("ExerUnity_modelfields");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ModelInheritDerive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<int>("deriveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("inheritTypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("deriveTypeId");

                    b.HasIndex("inheritTypeId");

                    b.ToTable("ExerUnity_modelinheritderives");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Module", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ExerUnity_modules");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ReqResInterface", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("funcName")
                        .HasColumnType("text");

                    b.Property<bool>("isEmit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("operCode")
                        .HasColumnType("text");

                    b.Property<string>("operText")
                        .HasColumnType("text");

                    b.Property<string>("route")
                        .HasColumnType("text");

                    b.Property<int>("serviceId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("serviceId");

                    b.ToTable("ExerUnity_reqresinterfaces");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("moduleId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("ExerUnity_services");
                });

            modelBuilder.Entity("ExermonDevManager.Core.Entities.CustomEnum", b =>
                {
                    b.HasOne("ExermonDevManager.Core.Entities.CustomEnumGroup", "enumGroup")
                        .WithMany("values")
                        .HasForeignKey("enumGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Exception_", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Module", "module")
                        .WithMany()
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", "model")
                        .WithMany()
                        .HasForeignKey("modelId");
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupDataInheritDerive", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", "deriveType")
                        .WithMany("inherits")
                        .HasForeignKey("deriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", "inheritType")
                        .WithMany("derives")
                        .HasForeignKey("inheritTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.InterfaceParam", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.EmitInterface", "emitInterface")
                        .WithMany("params_")
                        .HasForeignKey("emitInterfaceId");

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", "ownerType")
                        .WithMany("params_")
                        .HasForeignKey("ownerTypeId");

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.ReqResInterface", "reqInterface")
                        .WithMany("reqParams")
                        .HasForeignKey("reqInterfaceId");

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.ReqResInterface", "resInterface")
                        .WithMany("resParams")
                        .HasForeignKey("resInterfaceId");

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.GroupData", "type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Module", "module")
                        .WithMany("models")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ModelField", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", "ownerType")
                        .WithMany("params_")
                        .HasForeignKey("ownerTypeId");

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", "type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ModelInheritDerive", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", "deriveType")
                        .WithMany("inherits")
                        .HasForeignKey("deriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Model", "inheritType")
                        .WithMany("derives")
                        .HasForeignKey("inheritTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.ReqResInterface", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Service", "service")
                        .WithMany("interfaces")
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Frameworks.ExerUnity.Entities.Service", b =>
                {
                    b.HasOne("ExermonDevManager.Frameworks.ExerUnity.Entities.Module", "module")
                        .WithMany("services")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
