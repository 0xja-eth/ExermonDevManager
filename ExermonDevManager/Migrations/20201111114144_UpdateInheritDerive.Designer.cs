// <auto-generated />
using System;
using ExermonDevManager.Scripts.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExermonDevManager.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20201111114144_UpdateInheritDerive")]
    partial class UpdateInheritDerive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.ChannelsTag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("channelTags");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.CustomEnum", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("enumGroupId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("enumGroupId");

                    b.ToTable("customEnums");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.CustomEnumGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("isBackend")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFrontend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("customEnumGroups");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.DjangoFieldType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("djangoFieldTypes");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.DjangoOnDeleteChoice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("djangoOnDeleteChoices");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.EmitInterface", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("bModuleId")
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("bModuleId");

                    b.ToTable("emitInterfaces");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Exception_", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("alertText")
                        .HasColumnType("text");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("moduleId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("exceptions");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.GroupData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("derivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("groupDatas");

                    b.HasDiscriminator();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.InterfaceParam", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("dimension")
                        .HasColumnType("int");

                    b.Property<int?>("emitInterfaceId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int?>("ownerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("reqInterfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("resInterfaceId")
                        .HasColumnType("int");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("emitInterfaceId");

                    b.HasIndex("ownerTypeId");

                    b.HasIndex("reqInterfaceId");

                    b.HasIndex("resInterfaceId");

                    b.HasIndex("typeId");

                    b.ToTable("interfaceParams");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("abstract_")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("derivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("isBackend")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFrontend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("keyName")
                        .HasColumnType("text");

                    b.Property<int>("moduleId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("models");

                    b.HasDiscriminator();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSetting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("modelId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("modelId");

                    b.ToTable("typeSettings");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSettingModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("modelId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("typeSettingId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("modelId");

                    b.HasIndex("typeSettingId");

                    b.ToTable("typeSettingModels");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSettingModelField", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("modelFieldId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("typeSettingId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("modelFieldId");

                    b.HasIndex("typeSettingId");

                    b.ToTable("typeSettingModelFields");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.ModelField", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("autoConvert")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoLoad")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoNow")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoNowAdd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("bDefault")
                        .HasColumnType("text");

                    b.Property<int>("bTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("blank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("choicesId")
                        .HasColumnType("int");

                    b.Property<string>("convertFunc")
                        .HasColumnType("text");

                    b.Property<bool>("defaultNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("dimension")
                        .HasColumnType("int");

                    b.Property<string>("fDefault")
                        .HasColumnType("text");

                    b.Property<int>("fTypeId")
                        .HasColumnType("int");

                    b.Property<string>("format")
                        .HasColumnType("text");

                    b.Property<bool>("isBackend_")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isFrontend_")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("keyName")
                        .HasColumnType("text");

                    b.Property<bool>("listDisplay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("listEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("maxLength")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("null_")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("onDeleteId")
                        .HasColumnType("int");

                    b.Property<int?>("ownerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("protectedSet")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("toModelId")
                        .HasColumnType("int");

                    b.Property<string>("typeExclude")
                        .HasColumnType("text");

                    b.Property<string>("typeFilter")
                        .HasColumnType("text");

                    b.Property<bool>("unique")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("uploadTo")
                        .HasColumnType("text");

                    b.Property<bool>("useList")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("verboseName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("bTypeId");

                    b.HasIndex("choicesId");

                    b.HasIndex("fTypeId");

                    b.HasIndex("onDeleteId");

                    b.HasIndex("ownerTypeId");

                    b.HasIndex("toModelId");

                    b.ToTable("modelFields");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Module", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.ReqResInterface", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("bFunc")
                        .HasColumnType("text");

                    b.Property<int>("bModuleId")
                        .HasColumnType("int");

                    b.Property<int>("bTagId")
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("fName")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("route")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("bModuleId");

                    b.HasIndex("bTagId");

                    b.ToTable("reqResInterfaces");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Type_", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("derivable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Type_");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Type_<ExermonDevManager.Scripts.Entities.GroupData, ExermonDevManager.Scripts.Entities.InterfaceParam>+InheritDerive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("deriveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("inheritTypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("deriveTypeId");

                    b.HasIndex("inheritTypeId");

                    b.ToTable("groupDataInheritDerives");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Type_<ExermonDevManager.Scripts.Entities.Model, ExermonDevManager.Scripts.Entities.ModelField>+InheritDerive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("buildIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("deriveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("inheritTypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("deriveTypeId");

                    b.HasIndex("inheritTypeId");

                    b.ToTable("modelInheritDerives");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.CustomEnum", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.CustomEnumGroup", "enumGroup")
                        .WithMany("values")
                        .HasForeignKey("enumGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.EmitInterface", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Module", "bModule")
                        .WithMany("emitInterfaces")
                        .HasForeignKey("bModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Exception_", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Module", "module")
                        .WithMany("exceptions")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.InterfaceParam", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.EmitInterface", "emitInterface")
                        .WithMany("params_")
                        .HasForeignKey("emitInterfaceId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.GroupData", "ownerType")
                        .WithMany("params_")
                        .HasForeignKey("ownerTypeId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.ReqResInterface", "reqInterface")
                        .WithMany("reqParams")
                        .HasForeignKey("reqInterfaceId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.ReqResInterface", "resInterface")
                        .WithMany("resParams")
                        .HasForeignKey("resInterfaceId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.GroupData", "type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Module", "module")
                        .WithMany("models")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSetting", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "model")
                        .WithMany("typeSettings")
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSettingModel", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "model")
                        .WithMany("typeSettingModels")
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model+TypeSetting", "typeSetting")
                        .WithMany("relModels")
                        .HasForeignKey("typeSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Model+TypeSettingModelField", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.ModelField", "modelField")
                        .WithMany("typeSettingModelFields")
                        .HasForeignKey("modelFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model+TypeSetting", "typeSetting")
                        .WithMany("fields")
                        .HasForeignKey("typeSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.ModelField", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.DjangoFieldType", "bType")
                        .WithMany()
                        .HasForeignKey("bTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.CustomEnumGroup", "choices")
                        .WithMany()
                        .HasForeignKey("choicesId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "fType")
                        .WithMany()
                        .HasForeignKey("fTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.DjangoOnDeleteChoice", "onDelete")
                        .WithMany()
                        .HasForeignKey("onDeleteId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "ownerType")
                        .WithMany("params_")
                        .HasForeignKey("ownerTypeId");

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "toModel")
                        .WithMany()
                        .HasForeignKey("toModelId");
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.ReqResInterface", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Module", "bModule")
                        .WithMany("reqResInterfaces")
                        .HasForeignKey("bModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.ChannelsTag", "bTag")
                        .WithMany()
                        .HasForeignKey("bTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Type_<ExermonDevManager.Scripts.Entities.GroupData, ExermonDevManager.Scripts.Entities.InterfaceParam>+InheritDerive", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.GroupData", "deriveType")
                        .WithMany("inherits")
                        .HasForeignKey("deriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.GroupData", "inheritType")
                        .WithMany("derives")
                        .HasForeignKey("inheritTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExermonDevManager.Scripts.Entities.Type_<ExermonDevManager.Scripts.Entities.Model, ExermonDevManager.Scripts.Entities.ModelField>+InheritDerive", b =>
                {
                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "deriveType")
                        .WithMany("inherits")
                        .HasForeignKey("deriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExermonDevManager.Scripts.Entities.Model", "inheritType")
                        .WithMany("derives")
                        .HasForeignKey("inheritTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
